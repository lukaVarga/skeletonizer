// @ts-check

import globals from 'globals';
import tsParser from '@typescript-eslint/parser';
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import stylisticTs from '@stylistic/eslint-plugin-ts';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import angular from 'angular-eslint';
import vueParser from 'vue-eslint-parser';
import pluginVue from 'eslint-plugin-vue';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.strict,
  ...tseslint.configs.stylistic,
  {
    plugins: {
      '@stylistic/ts': stylisticTs,
    },
    files: ['**/*.ts', '**/*.mts', '**/*.vue', '**/*.js', '**/*.mjs'],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        project: ['tsconfig.json'],
      },
      ecmaVersion: 6,
      globals: {
        ...globals.browser,
        ...globals.node,
      },
    },
    rules: {
      '@typescript-eslint/adjacent-overload-signatures': 'error',
      '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
      '@typescript-eslint/await-thenable': 'error',
      '@typescript-eslint/ban-ts-comment': ['error', {
        'ts-ignore': 'allow-with-description',
      }],
      '@stylistic/ts/brace-style': ['error'],
      '@stylistic/ts/comma-spacing': ['error', { before: false, after: true }],
      '@stylistic/ts/comma-dangle': ['error', {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
        functions: 'always-multiline',
        enums: 'always-multiline',
        generics: 'always-multiline',
        tuples: 'always-multiline',
      }],
      '@typescript-eslint/consistent-generic-constructors': ['error', 'type-annotation'],
      '@typescript-eslint/consistent-indexed-object-style': 'error',
      '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'as' }],
      '@typescript-eslint/default-param-last': 'error',
      '@typescript-eslint/explicit-function-return-type': [
        'error',
        {
          allowExpressions: false,
          allowTypedFunctionExpressions: true,
          allowHigherOrderFunctions: false,
          allowDirectConstAssertionInArrowFunctions: false,
          allowConciseArrowFunctionExpressionsStartingWithVoid: false,
          allowedNames: [],
        },
      ],
      '@typescript-eslint/explicit-member-accessibility': 'error',
      '@typescript-eslint/explicit-module-boundary-types': 'error',
      '@stylistic/ts/func-call-spacing': 'error',
      '@stylistic/ts/indent': ['error', 2, { SwitchCase: 1 }],
      '@stylistic/ts/keyword-spacing': ['error', { before: true, after: true }],
      '@stylistic/ts/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
      '@typescript-eslint/member-ordering': [
        'error',
        {
          default: {
            order: 'as-written',
            memberTypes: [
              'signature',

              'public-abstract-field',
              'public-static-field',
              'public-decorated-field',
              'public-instance-field',

              'public-abstract-get',
              'public-static-get',
              'public-decorated-get',
              'public-instance-get',

              'public-abstract-set',
              'public-static-set',
              'public-decorated-set',
              'public-instance-set',

              'protected-abstract-field',
              'protected-static-field',
              'protected-decorated-field',
              'protected-instance-field',

              'protected-abstract-get',
              'protected-static-get',
              'protected-decorated-get',
              'protected-instance-get',

              'protected-abstract-set',
              'protected-static-set',
              'protected-decorated-set',
              'protected-instance-set',

              'private-static-field',
              'private-decorated-field',
              'private-instance-field',

              'private-static-get',
              'private-decorated-get',
              'private-instance-get',

              'private-static-set',
              'private-decorated-set',
              'private-instance-set',

              '#private-static-field',
              '#private-instance-field',

              '#private-static-get',
              '#private-instance-get',

              '#private-static-set',
              '#private-instance-set',

              'public-constructor',
              'protected-constructor',
              'private-constructor',

              'public-abstract-method',
              'public-static-method',
              'public-decorated-method',
              'public-instance-method',

              'protected-abstract-method',
              'protected-static-method',
              'protected-decorated-method',
              'protected-instance-method',

              'private-static-method',
              'private-decorated-method',
              'private-instance-method',

              '#private-static-method',
              '#private-instance-method',
            ],
          },
        },
      ],
      '@stylistic/ts/member-delimiter-style': 'error',
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: 'variable',
          format: ['camelCase', 'UPPER_CASE'],
          leadingUnderscore: 'allow',
          trailingUnderscore: 'forbid',
          filter: {
            regex: '__filename|__dirname',
            match: false,
          },
        },
        { selector: 'function', format: ['camelCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        {
          selector: 'property',
          format: ['camelCase'],
          leadingUnderscore: 'allow',
          trailingUnderscore: 'forbid',
        },
        { selector: 'parameterProperty', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        { selector: 'accessor', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        { selector: 'enumMember', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        { selector: 'class', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        {
          selector: 'interface',
          format: ['PascalCase'],
          leadingUnderscore: 'forbid',
          trailingUnderscore: 'forbid',
          prefix: ['I'],
        },
        {
          selector: 'typeAlias',
          format: ['PascalCase'],
          leadingUnderscore: 'forbid',
          trailingUnderscore: 'forbid',
          prefix: ['T'],
        },
        {
          selector: 'enum',
          format: ['PascalCase'],
          leadingUnderscore: 'forbid',
          trailingUnderscore: 'forbid',
          suffix: ['Enum'],
        },
        { selector: 'typeParameter', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        {
          selector: [
            'classProperty',
            'objectLiteralProperty',
            'typeProperty',
            'classMethod',
            'objectLiteralMethod',
            'typeMethod',
            'accessor',
            'enumMember',
          ],
          format: null,
          modifiers: ['requiresQuotes'],
        },
      ],
      '@typescript-eslint/no-base-to-string': 'error',
      '@typescript-eslint/no-dupe-class-members': 'error',
      '@typescript-eslint/no-confusing-void-expression': 'error',
      '@typescript-eslint/no-duplicate-enum-values': 'error',
      '@typescript-eslint/no-dynamic-delete': 'error',
      '@typescript-eslint/no-empty-function': 'off',
      '@typescript-eslint/no-empty-object-type': 'error',
      '@typescript-eslint/no-empty-interface': ['error', { allowSingleExtends: true }],
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-extraneous-class': 'off',
      '@typescript-eslint/no-extra-non-null-assertion': 'error',
      '@stylistic/ts/no-extra-semi': 'error',
      '@typescript-eslint/no-for-in-array': 'error',
      '@typescript-eslint/no-implied-eval': 'error',
      '@typescript-eslint/no-inferrable-types': 'off',
      '@typescript-eslint/no-invalid-void-type': 'error',
      '@typescript-eslint/no-misused-promises': [
        'error',
        {
          checksConditionals: true,
          checksVoidReturn: false,
          checksSpreads: true,
        },
      ],
      '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
      '@typescript-eslint/no-require-imports': 'error',
      '@typescript-eslint/no-shadow': ['error'],
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
      '@typescript-eslint/no-unnecessary-condition': 'error',
      '@typescript-eslint/no-unnecessary-type-arguments': 'error',
      '@typescript-eslint/no-unnecessary-type-assertion': 'error',
      '@typescript-eslint/no-unnecessary-type-constraint': 'error',
      '@typescript-eslint/no-unsafe-function-type': 'error',
      '@typescript-eslint/no-unsafe-return': 'error',
      '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      '@typescript-eslint/no-use-before-define': 'error',
      '@typescript-eslint/no-useless-constructor': 'error',
      '@typescript-eslint/no-useless-empty-export': 'error',
      '@typescript-eslint/no-var-requires': 'error',
      '@typescript-eslint/no-wrapper-object-types': 'error',
      '@typescript-eslint/non-nullable-type-assertion-style': 'error',
      '@stylistic/ts/object-curly-spacing': ['error', 'always'],
      '@stylistic/ts/padding-line-between-statements': [
        'error',
        {
          blankLine: 'always',
          prev: '*',
          next: [
            'return',
            'break',
            'for',
            'function',
            'if',
            'multiline-block-like',
            'multiline-const',
            'multiline-expression',
            'multiline-var',
            'switch',
            'try',
            'while',
          ],
        },
        {
          blankLine: 'always',
          prev: ['multiline-block-like', 'multiline-const', 'multiline-expression', 'multiline-var', 'switch', 'try', 'while'],
          next: '*',
        },
        {
          blankLine: 'always',
          prev: 'import',
          next: '*',
        },
        {
          blankLine: 'never',
          prev: 'import',
          next: 'import',
        },
      ],
      '@typescript-eslint/prefer-as-const': 'error',
      '@typescript-eslint/prefer-enum-initializers': 'error',
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/prefer-includes': 'error',
      '@typescript-eslint/prefer-literal-enum-member': 'error',
      '@typescript-eslint/prefer-nullish-coalescing': [
        'error',
        {
          ignoreConditionalTests: true,
          ignoreMixedLogicalExpressions: true,
          ignoreTernaryTests: false,
        },
      ],
      '@typescript-eslint/prefer-optional-chain': 'error',
      '@typescript-eslint/prefer-readonly': 'error',
      '@typescript-eslint/prefer-reduce-type-parameter': 'error',
      '@typescript-eslint/prefer-regexp-exec': 'error',
      '@typescript-eslint/prefer-return-this-type': 'error',
      '@typescript-eslint/prefer-string-starts-ends-with': 'error',
      '@stylistic/ts/quotes': ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],
      '@typescript-eslint/restrict-plus-operands': 'error',
      '@stylistic/ts/semi': 'error',
      '@stylistic/ts/space-before-blocks': 'error',
      '@stylistic/ts/space-before-function-paren': [
        'error',
        {
          anonymous: 'never',
          named: 'never',
          asyncArrow: 'always',
        },
      ],
      '@stylistic/ts/space-infix-ops': 'error',
      '@typescript-eslint/switch-exhaustiveness-check': 'error',
      '@stylistic/ts/type-annotation-spacing': [
        'error',
        {
          before: false,
          after: true,
          overrides: {
            arrow: {
              before: true,
              after: true,
            },
          },
        },
      ],
      '@typescript-eslint/typedef': [
        'error',
        {
          arrayDestructuring: true,
          arrowParameter: true,
          memberVariableDeclaration: true,
          objectDestructuring: true,
          parameter: true,
          propertyDeclaration: true,
          variableDeclaration: true,
        },
      ],
      'array-bracket-newline': ['error', 'consistent'],
      'array-bracket-spacing': 'error',
      'array-callback-return': 'error',
      'array-element-newline': ['error', 'consistent'],
      'arrow-body-style': ['error', 'as-needed'],
      'arrow-parens': ['error', 'as-needed', { requireForBlockBody: true }],
      'arrow-spacing': 'error',
      'block-scoped-var': 'error',
      'block-spacing': 'error',
      'brace-style': 'off',
      'comma-dangle': 'off',
      'comma-spacing': 'off',
      'comma-style': ['error', 'last'],
      'computed-property-spacing': 'error',
      curly: 'error',
      'dot-location': ['error', 'property'],
      'dot-notation': 'error',
      eqeqeq: 'error',
      'func-call-spacing': 'off',
      indent: 'off',
      'key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
      'keyword-spacing': 'off',
      'lines-between-class-members': 'off',
      'max-len': [
        'error',
        {
          code: 140,
          tabWidth: 2,
          ignoreUrls: true,
          ignoreTrailingComments: true,
          ignoreRegExpLiterals: true,
          ignorePattern: '^import [^,]+ from',
        },
      ],
      'multiline-ternary': ['error', 'always-multiline'],
      'new-parens': 'error',
      'newline-per-chained-call': ['error', { ignoreChainWithDepth: 3 }],
      'no-bitwise': 'error',
      'no-confusing-arrow': ['error', { allowParens: true }],
      'no-constant-condition': 'error',
      'no-console': 'error',
      'no-debugger': 'error',
      'no-dupe-class-members': 'off',
      'no-duplicate-imports': 'error',
      'no-empty': ['error', { allowEmptyCatch: true }],
      'no-empty-function': 'off',
      'no-eq-null': 'error',
      'no-extra-boolean-cast': 'off',
      'no-extra-semi': 'off',
      'no-mixed-operators': 'error',
      'no-mixed-spaces-and-tabs': 'error',
      'no-multi-spaces': 'error',
      'no-multiple-empty-lines': ['error', { max: 1 }],
      'no-negated-condition': 'error',
      'no-self-compare': 'error',
      'no-sequences': 'error',
      'no-shadow': 'off',
      'no-throw-literal': 'error',
      'no-trailing-spaces': 'warn',
      'no-unneeded-ternary': 'error',
      'no-use-before-define': 'off',
      'no-useless-constructor': 'off',
      'no-useless-return': 'error',
      'no-var': 'error',
      'no-void': 'error',
      'no-whitespace-before-property': 'error',
      'object-curly-spacing': 'off',
      'object-shorthand': ['error', 'methods'],
      'one-var-declaration-per-line': 'error',
      'padded-blocks': ['error', 'never'],
      'padding-line-between-statements': 'off',
      'prefer-const': 'error',
      'prefer-object-spread': 'error',
      'prefer-rest-params': 'error',
      'prefer-spread': 'error',
      'quote-props': ['error', 'as-needed'],
      quotes: 'off',
      semi: 'off',
      'semi-spacing': ['error', { before: false, after: true }],
      'semi-style': ['error', 'last'],
      'space-before-blocks': 'off',
      'space-before-function-paren': 'off',
      'space-in-parens': ['error', 'never'],
      'space-infix-ops': 'off',
      'switch-colon-spacing': ['error', { after: true, before: false }],
      yoda: 'error',
    },
  },
  {
    files: ['**/*.js', '**/*.mjs'],
    ...tseslint.configs.disableTypeChecked,
    rules: {
      '@typescript-eslint/typedef': 'off',
      '@typescript-eslint/no-unsafe-return': 'off',
    },
  },
  {
    files: ['**/*.spec.ts', '**/*.spec-d.ts'],
    rules: {
      '@typescript-eslint/ban-ts-ignore': 'off',
      '@typescript-eslint/ban-ts-comment': 'off',
    },
  },
  {
    files: [
      '**/*.config.ts',
      '**/*.config.mts',
      '**/*.config.mjs',
      '**/*.config.js',
    ],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: ['./tsconfig.eslint.json'],
      },
      ecmaVersion: 6,
      globals: {
        ...globals.browser,
        ...globals.node,
      },
    },
    rules: {
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: 'variable',
          format: ['camelCase', 'UPPER_CASE'],
          leadingUnderscore: 'allow',
          trailingUnderscore: 'forbid',
          filter: {
            regex: '__filename|__dirname',
            match: false,
          },
        },
        { selector: 'function', format: ['camelCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        {
          selector: 'property',
          format: null,
        },
        { selector: 'parameterProperty', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        { selector: 'accessor', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
        { selector: 'enumMember', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        { selector: 'class', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        {
          selector: 'interface',
          format: ['PascalCase'],
          leadingUnderscore: 'forbid',
          trailingUnderscore: 'forbid',
          prefix: ['I'],
        },
        {
          selector: 'typeAlias',
          format: ['PascalCase'],
          leadingUnderscore: 'forbid',
          trailingUnderscore: 'forbid',
          prefix: ['T'],
        },
        {
          selector: 'enum',
          format: ['PascalCase'],
          leadingUnderscore: 'forbid',
          trailingUnderscore: 'forbid',
          suffix: ['Enum'],
        },
        { selector: 'typeParameter', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        {
          selector: [
            'classProperty',
            'objectLiteralProperty',
            'typeProperty',
            'classMethod',
            'objectLiteralMethod',
            'typeMethod',
            'accessor',
            'enumMember',
          ],
          format: null,
          modifiers: ['requiresQuotes'],
        },
      ],
    },
  },
  // angular package specifics
  {
    files: ['packages/angular/**/*.ts'],
    extends: [
      ...angular.configs.tsRecommended,
    ],
    processor: angular.processInlineTemplates,
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        tsconfigRootDir: __dirname + '/packages/angular',
        project: ['./tsconfig.eslint.json'],
        ecmaVersion: 2020,
        sourceType: 'module',
      },
    },
    rules: {
      '@angular-eslint/no-input-rename': 'off',
      '@angular-eslint/no-lifecycle-call': 'error',
    },
  },
  {
    files: ['packages/angular/**/*.html'],
    extends: [
      ...angular.configs.templateRecommended,
      ...angular.configs.templateAccessibility,
    ],
    rules: {
      '@angular-eslint/template/attributes-order': ['error', {
        order: [
          'STRUCTURAL_DIRECTIVE',
          'TEMPLATE_REFERENCE',
          'INPUT_BINDING',
          'TWO_WAY_BINDING',
          'OUTPUT_BINDING',
          'ATTRIBUTE_BINDING',
        ],
      }],
      '@angular-eslint/template/prefer-control-flow': 'error',
      '@typescript-eslint/adjacent-overload-signatures': 'off',
      '@typescript-eslint/await-thenable': 'off',
      '@typescript-eslint/ban-ts-comment': 'off',
      '@typescript-eslint/consistent-type-assertions': 'off',
      '@typescript-eslint/indent': 'off',
      '@typescript-eslint/naming-convention': 'off',
      '@typescript-eslint/no-base-to-string': 'off',
      '@typescript-eslint/no-implied-eval': 'off',
      '@typescript-eslint/no-misused-promises': 'off',
      '@typescript-eslint/no-throw-literal': 'off',
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'off',
      '@typescript-eslint/no-unnecessary-condition': 'off',
      '@typescript-eslint/no-unnecessary-type-arguments': 'off',
      '@typescript-eslint/no-unnecessary-type-assertion': 'off',
      '@typescript-eslint/no-unsafe-return': 'off',
      '@typescript-eslint/non-nullable-type-assertion-style': 'off',
      '@typescript-eslint/prefer-includes': 'off',
      '@typescript-eslint/prefer-nullish-coalescing': 'off',
      '@typescript-eslint/prefer-optional-chain': 'off',
      '@typescript-eslint/prefer-readonly': 'off',
      '@typescript-eslint/prefer-reduce-type-parameter': 'off',
      '@typescript-eslint/prefer-regexp-exec': 'off',
      '@typescript-eslint/prefer-return-this-type': 'off',
      '@typescript-eslint/prefer-string-starts-ends-with': 'off',
      '@typescript-eslint/restrict-plus-operands': 'off',
      '@typescript-eslint/switch-exhaustiveness-check': 'off',
      'max-len': 'off',
      'no-trailing-spaces': 'off',
    },
  },
  // vue package specifics
  {
    files: ['packages/vue/**/*.vue'],
    languageOptions: {
      parser: vueParser,
      parserOptions: {
        parser: tseslint.parser,
        tsconfigRootDir: __dirname + '/packages/vue',
        project: ['tsconfig.eslint.json'],
        extraFileExtensions: ['.vue'],
        ecmaVersion: 6,
      },
    },
    processor: pluginVue.processors['.vue'],
    plugins: {
      vue: pluginVue,
    },
    rules: {
      ...pluginVue.configs['flat/recommended'].map(({ rules }) => rules).reduce((acc, curr) => ({ ...acc, ...curr }), {}),
      'vue/attributes-order': 'error',
      'vue/component-tags-order': 'error',
      'vue/no-lone-template': 'error',
      'vue/no-multiple-slot-args': 'error',
      'vue/no-v-html': 'error',
      'vue/order-in-components': 'error',
      'vue/this-in-template': 'error',
      'vue/block-tag-newline': 'error',
      'vue/component-api-style': 'error',
      'vue/component-name-in-template-casing': [
        'error',
        'kebab-case',
        { registeredComponentsOnly: false },
      ],
      'vue/component-options-name-casing': ['error', 'PascalCase'],
      'vue/custom-event-name-casing': ['error', 'camelCase'],
      'vue/define-emits-declaration': ['error', 'type-based'],
      'vue/define-macros-order': [
        'error',
        {
          order: ['defineProps', 'defineEmits'],
        },
      ],
      'vue/define-props-declaration': ['error', 'type-based'],
      'vue/html-comment-content-spacing': ['error', 'always'],
      'vue/html-comment-indent': ['error', 2],
      'vue/html-comment-content-newline': ['error', { singleline: 'ignore', multiline: 'always' }, { exceptions: ['*'] }],
      'vue/match-component-file-name': ['error', {
        extensions: ['vue'],
        shouldMatchCase: false,
      }],
      'vue/next-tick-style': ['error', 'promise'],
      'vue/no-potential-component-option-typo': ['error', {
        presets: ['vue'],
        custom: [],
        threshold: 1,
      }],
      'vue/no-ref-object-destructure': 'error',
      'vue/no-static-inline-styles': ['error', { allowBinding: true }],
      'vue/no-useless-mustaches': 'error',
      'vue/no-useless-v-bind': 'error',
      'vue/no-v-text': 'error',
      'vue/padding-line-between-blocks': ['error', 'always'],
      'vue/padding-line-between-tags': [
        'error',
        [
          { blankLine: 'consistent', prev: '*', next: '*' },
        ],
      ],
      'vue/require-direct-export': [
        'error',
        {
          disallowFunctionalComponentFunction: false,
        },
      ],
      'vue/require-emit-validator': 'error',
      'vue/require-expose': 'error',
      'vue/script-indent': [
        'error',
        2,
        {
          baseIndent: 0,
          switchCase: 1,
          ignores: [],
        },
      ],
      'vue/sort-keys': ['error', 'asc', {
        caseSensitive: true,
        ignoreChildrenOf: ['model'],
        ignoreGrandchildrenOf: ['computed', 'directives', 'inject', 'props', 'watch'],
        minKeys: 2,
        natural: false,
      }],
      'vue/static-class-names-order': 'error',
      'vue/v-for-delimiter-style': ['error', 'of'],
      'vue/v-on-handler-style': [
        'error',
        'inline',
        {
          ignoreIncludesComment: false,
        },
      ],
      'vue/array-bracket-newline': ['error', 'consistent'],
      'vue/array-bracket-spacing': 'error',
      'vue/arrow-spacing': 'error',
      'vue/block-spacing': 'error',
      'vue/brace-style': 'error',
      'vue/comma-dangle': ['error', {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
        functions: 'always-multiline',
      }],
      'vue/comma-spacing': ['error', { before: false, after: true }],
      'vue/dot-location': ['error', 'property'],
      'vue/dot-notation': 'error',
      'vue/eqeqeq': 'error',
      'vue/func-call-spacing': 'error',
      'vue/key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
      'vue/keyword-spacing': ['error', { before: true, after: true }],
      'max-len': 'off',
      'vue/max-len': [
        'error',
        {
          code: 140,
          template: 140,
          tabWidth: 2,
          ignoreUrls: true,
          ignoreTrailingComments: true,
          ignoreRegExpLiterals: true,
          ignorePattern: '^import [^,]+ from',
          ignoreHTMLAttributeValues: true,
        },
      ],
      'vue/multiline-ternary': ['error', 'always-multiline'],
      'vue/no-constant-condition': 'error',
      'vue/object-curly-spacing': ['error', 'always'],
      'vue/object-shorthand': ['error', 'methods'],
      'vue/quote-props': ['error', 'as-needed'],
      'vue/space-in-parens': ['error', 'never'],
      'vue/space-infix-ops': 'error',
      'no-undef': 'off',
    },
  },
  {
    files: ['packages/vue/**/*.ts'],
    languageOptions: {
      parserOptions: {
        parser: tsParser,
        tsconfigRootDir: __dirname + '/packages/vue',
        project: ['tsconfig.eslint.json'],
        ecmaVersion: 'es6',
      },
    },
  },
  {
    files: ['packages/utils/**/*.ts'],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        tsconfigRootDir: __dirname + '/packages/utils',
        project: ['tsconfig.eslint.json'],
        ecmaVersion: 'es6',
      },
    },
  },
);
