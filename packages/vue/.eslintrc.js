module.exports = {
  env: {
    browser: true,
  },
  extends: ['../../.eslintrc.js'],
  overrides: [
    {
      files: ['*.vue'],
      parser: 'vue-eslint-parser',
      parserOptions: {
        project: ['tsconfig.vitest.json'],
        ecmaVersion: 'es6',
        parser: '@typescript-eslint/parser',
      },
      extends: [
        'plugin:vue/vue3-recommended',
      ],
      plugins: [
        '@typescript-eslint',
      ],
      rules: {
        'vue/block-tag-newline': 'error',
        'vue/component-api-style': 'error',
        'vue/component-name-in-template-casing': [
          'error',
          'kebab-case',
          { registeredComponentsOnly: false },
        ],
        'vue/component-options-name-casing': ['error', 'PascalCase'],
        'vue/custom-event-name-casing': ['error', 'camelCase'],
        'vue/define-emits-declaration': ['error', 'type-based'],
        'vue/define-macros-order': [
          'error',
          {
            order: ['defineProps', 'defineEmits'],
          },
        ],
        'vue/define-props-declaration': ['error', 'type-based'],
        'vue/html-comment-content-spacing': ['error', 'always'],
        'vue/html-comment-indent': ['error', 2],
        'vue/html-comment-content-newline': ['error', { singleline: 'ignore', multiline: 'always' }, { exceptions: ['*'] }],
        'vue/match-component-file-name': ['error', {
          extensions: ['vue'],
          shouldMatchCase: false,
        }],
        'vue/next-tick-style': ['error', 'promise'],
        'vue/no-potential-component-option-typo': ['error', {
          presets: ['vue'],
          custom: [],
          threshold: 1,
        }],
        'vue/no-ref-object-destructure': 'error',
        'vue/no-static-inline-styles': ['error', { allowBinding: true }],
        'vue/no-useless-mustaches': 'error',
        'vue/no-useless-v-bind': 'error',
        'vue/no-v-text': 'error',
        'vue/padding-line-between-blocks': ['error', 'always'],
        'vue/padding-line-between-tags': [
          'error',
          [
            { blankLine: 'consistent', prev: '*', next: '*' },
          ],
        ],
        'vue/require-direct-export': [
          'error',
          {
            disallowFunctionalComponentFunction: false,
          },
        ],
        'vue/require-emit-validator': 'error',
        'vue/require-expose': 'error',
        'vue/script-indent': [
          'error',
          2,
          {
            baseIndent: 0,
            switchCase: 1,
            ignores: [],
          },
        ],
        'vue/sort-keys': ['error', 'asc', {
          caseSensitive: true,
          ignoreChildrenOf: ['model'],
          ignoreGrandchildrenOf: ['computed', 'directives', 'inject', 'props', 'watch'],
          minKeys: 2,
          natural: false,
        }],
        'vue/static-class-names-order': 'error',
        'vue/v-for-delimiter-style': ['error', 'of'],
        'vue/v-on-handler-style': [
          'error',
          'inline',
          {
            ignoreIncludesComment: false,
          },
        ],
        'vue/array-bracket-newline': ['error', 'consistent'],
        'vue/array-bracket-spacing': 'error',
        'vue/arrow-spacing': 'error',
        'vue/block-spacing': 'error',
        'vue/brace-style': 'error',
        'vue/comma-dangle': ['error', {
          arrays: 'always-multiline',
          objects: 'always-multiline',
          imports: 'always-multiline',
          exports: 'always-multiline',
          functions: 'always-multiline',
        }],
        'vue/comma-spacing': ['error', { before: false, after: true }],
        'vue/dot-location': ['error', 'property'],
        'vue/dot-notation': 'error',
        'vue/eqeqeq': 'error',
        'vue/func-call-spacing': 'error',
        'vue/key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
        'vue/keyword-spacing': ['error', { before: true, after: true }],
        'max-len': 'off',
        'vue/max-len': [
          'error',
          {
            code: 140,
            template: 140,
            tabWidth: 2,
            ignoreUrls: true,
            ignoreTrailingComments: true,
            ignoreRegExpLiterals: true,
            ignorePattern: '^import [^,]+ from',
            ignoreHTMLAttributeValues: true,
          },
        ],
        'vue/multiline-ternary': ['error', 'always-multiline'],
        'vue/no-constant-condition': 'error',
        'vue/object-curly-spacing': ['error', 'always'],
        'vue/object-shorthand': ['error', 'methods'],
        'vue/quote-props': ['error', 'as-needed'],
        'vue/space-in-parens': ['error', 'never'],
        'vue/space-infix-ops': 'error',
      },
    },
    {
      files: ['*.ts'],
      excludedFiles: ['vitest.config.ts', 'vite.config.ts'],
      parser: '@typescript-eslint/parser',
      parserOptions: {
        project: ['tsconfig.app.json'],
        ecmaVersion: 'es6',
      },
    },
    {
      files: ['**/*.spec.ts'],
      parserOptions: {
        project: ['tsconfig.vitest.json'],
        ecmaVersion: 'es6',
      },
    },
  ],
};
