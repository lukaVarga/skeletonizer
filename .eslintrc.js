module.exports = {
  env: {
    node: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
  ],
  rules: {
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
    '@typescript-eslint/await-thenable': 'error',
    '@typescript-eslint/ban-ts-comment': ['error', {
      'ts-ignore': 'allow-with-description',
    }],
    '@typescript-eslint/ban-types': 'error',
    '@typescript-eslint/brace-style': ['error'],
    '@typescript-eslint/comma-spacing': ['error', { before: false, after: true }],
    '@typescript-eslint/comma-dangle': ['error', {
      arrays: 'always-multiline',
      objects: 'always-multiline',
      imports: 'always-multiline',
      exports: 'always-multiline',
      functions: 'always-multiline',
      enums: 'always-multiline',
      generics: 'always-multiline',
      tuples: 'always-multiline',
    }],
    '@typescript-eslint/consistent-generic-constructors': ['error', 'type-annotation'],
    '@typescript-eslint/consistent-indexed-object-style': 'error',
    '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'as' }],
    '@typescript-eslint/default-param-last': 'error',
    '@typescript-eslint/explicit-function-return-type': [
      'error',
      {
        allowExpressions: false,
        allowTypedFunctionExpressions: true,
        allowHigherOrderFunctions: false,
        allowDirectConstAssertionInArrowFunctions: false,
        allowConciseArrowFunctionExpressionsStartingWithVoid: false,
        allowedNames: [],
      },
    ],
    '@typescript-eslint/explicit-member-accessibility': 'error',
    '@typescript-eslint/explicit-module-boundary-types': 'error',
    '@typescript-eslint/func-call-spacing': 'error',
    '@typescript-eslint/indent': ['error', 2, { SwitchCase: 1 }],
    '@typescript-eslint/keyword-spacing': ['error', { before: true, after: true }],
    '@typescript-eslint/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
    '@typescript-eslint/member-ordering': [
      'error',
      {
        default: {
          order: 'as-written',
          memberTypes: [
            'signature',

            'public-abstract-field',
            'public-static-field',
            'public-decorated-field',
            'public-instance-field',

            'public-abstract-get',
            'public-static-get',
            'public-decorated-get',
            'public-instance-get',

            'public-abstract-set',
            'public-static-set',
            'public-decorated-set',
            'public-instance-set',

            'protected-abstract-field',
            'protected-static-field',
            'protected-decorated-field',
            'protected-instance-field',

            'protected-abstract-get',
            'protected-static-get',
            'protected-decorated-get',
            'protected-instance-get',

            'protected-abstract-set',
            'protected-static-set',
            'protected-decorated-set',
            'protected-instance-set',

            'private-static-field',
            'private-decorated-field',
            'private-instance-field',

            'private-static-get',
            'private-decorated-get',
            'private-instance-get',

            'private-static-set',
            'private-decorated-set',
            'private-instance-set',

            '#private-static-field',
            '#private-instance-field',

            '#private-static-get',
            '#private-instance-get',

            '#private-static-set',
            '#private-instance-set',

            'public-constructor',
            'protected-constructor',
            'private-constructor',

            'public-abstract-method',
            'public-static-method',
            'public-decorated-method',
            'public-instance-method',

            'protected-abstract-method',
            'protected-static-method',
            'protected-decorated-method',
            'protected-instance-method',

            'private-static-method',
            'private-decorated-method',
            'private-instance-method',

            '#private-static-method',
            '#private-instance-method',
          ],
        },
      },
    ],
    '@typescript-eslint/member-delimiter-style': 'error',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'variable',
        format: ['camelCase', 'UPPER_CASE'],
        leadingUnderscore: 'allow',
        trailingUnderscore: 'forbid',
      },
      { selector: 'function', format: ['camelCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
      { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
      {
        selector: 'property',
        format: ['camelCase'],
        leadingUnderscore: 'allow',
        trailingUnderscore: 'forbid',
      },
      { selector: 'parameterProperty', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
      { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
      { selector: 'accessor', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
      { selector: 'enumMember', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
      { selector: 'class', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
      {
        selector: 'interface',
        format: ['PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
        prefix: ['I'],
      },
      {
        selector: 'typeAlias',
        format: ['PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
        prefix: ['T'],
      },
      {
        selector: 'enum',
        format: ['PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
        suffix: ['Enum'],
      },
      { selector: 'typeParameter', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
    ],
    '@typescript-eslint/no-dupe-class-members': 'error',
    '@typescript-eslint/no-base-to-string': 'error',
    '@typescript-eslint/no-confusing-void-expression': 'error',
    '@typescript-eslint/no-duplicate-enum-values': 'error',
    '@typescript-eslint/no-dynamic-delete': 'error',
    '@typescript-eslint/no-empty-function': 0,
    '@typescript-eslint/no-empty-interface': ['error', { allowSingleExtends: true }],
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/no-extra-non-null-assertion': 'error',
    '@typescript-eslint/no-extra-semi': 'error',
    '@typescript-eslint/no-for-in-array': 'error',
    '@typescript-eslint/no-implied-eval': 'error',
    '@typescript-eslint/no-inferrable-types': 0,
    '@typescript-eslint/no-invalid-void-type': 'error',
    '@typescript-eslint/no-misused-promises': [
      'error',
      {
        checksConditionals: true,
        checksVoidReturn: false,
        checksSpreads: true,
      },
    ],
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
    '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
    '@typescript-eslint/no-require-imports': 'error',
    '@typescript-eslint/no-shadow': ['error'],
    '@typescript-eslint/no-throw-literal': 'error',
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
    '@typescript-eslint/no-unnecessary-condition': 'error',
    '@typescript-eslint/no-unnecessary-type-arguments': 'error',
    '@typescript-eslint/no-unnecessary-type-assertion': 'error',
    '@typescript-eslint/no-unnecessary-type-constraint': 'error',
    '@typescript-eslint/no-unsafe-return': 'error',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    '@typescript-eslint/no-use-before-define': 'error',
    '@typescript-eslint/no-useless-constructor': 'error',
    '@typescript-eslint/no-useless-empty-export': 'error',
    '@typescript-eslint/no-var-requires': 'error',
    '@typescript-eslint/non-nullable-type-assertion-style': 'error',
    '@typescript-eslint/object-curly-spacing': ['error', 'always'],
    '@typescript-eslint/padding-line-between-statements': [
      'error',
      {
        blankLine: 'always',
        prev: '*',
        next: [
          'return',
          'break',
          'for',
          'function',
          'if',
          'multiline-block-like',
          'multiline-const',
          'multiline-expression',
          'multiline-var',
          'switch',
          'try',
          'while',
        ],
      },
      {
        blankLine: 'always',
        prev: ['multiline-block-like', 'multiline-const', 'multiline-expression', 'multiline-var', 'switch', 'try', 'while'],
        next: '*',
      },
      {
        blankLine: 'always',
        prev: 'import',
        next: '*',
      },
      {
        blankLine: 'never',
        prev: 'import',
        next: 'import',
      },
    ],
    '@typescript-eslint/prefer-as-const': 'error',
    '@typescript-eslint/prefer-enum-initializers': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-includes': 'error',
    '@typescript-eslint/prefer-literal-enum-member': 'error',
    '@typescript-eslint/prefer-nullish-coalescing': [
      'error',
      {
        ignoreConditionalTests: true,
        ignoreMixedLogicalExpressions: true,
        ignoreTernaryTests: false,
      },
    ],
    '@typescript-eslint/prefer-optional-chain': 'error',
    '@typescript-eslint/prefer-readonly': 'error',
    '@typescript-eslint/prefer-reduce-type-parameter': 'error',
    '@typescript-eslint/prefer-regexp-exec': 'error',
    '@typescript-eslint/prefer-return-this-type': 'error',
    '@typescript-eslint/prefer-string-starts-ends-with': 'error',
    '@typescript-eslint/quotes': ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],
    '@typescript-eslint/restrict-plus-operands': 'error',
    '@typescript-eslint/semi': 'error',
    '@typescript-eslint/space-before-blocks': 'error',
    '@typescript-eslint/space-before-function-paren': [
      'error',
      {
        anonymous: 'never',
        named: 'never',
        asyncArrow: 'always',
      },
    ],
    '@typescript-eslint/space-infix-ops': 'error',
    '@typescript-eslint/switch-exhaustiveness-check': 'error',
    '@typescript-eslint/type-annotation-spacing': [
      'error',
      {
        before: false,
        after: true,
        overrides: {
          arrow: {
            before: true,
            after: true,
          },
        },
      },
    ],
    '@typescript-eslint/typedef': [
      'error',
      {
        arrayDestructuring: true,
        arrowParameter: true,
        memberVariableDeclaration: true,
        objectDestructuring: true,
        parameter: true,
        propertyDeclaration: true,
        variableDeclaration: true,
      },
    ],
    'array-bracket-newline': ['error', 'consistent'],
    'array-bracket-spacing': 'error',
    'array-callback-return': 'error',
    'array-element-newline': ['error', 'consistent'],
    'arrow-body-style': ['error', 'as-needed'],
    'arrow-parens': ['error', 'as-needed', { requireForBlockBody: true }],
    'arrow-spacing': 'error',
    'block-scoped-var': 'error',
    'block-spacing': 'error',
    'brace-style': 'off',
    'comma-dangle': 'off',
    'comma-spacing': 'off',
    'comma-style': ['error', 'last'],
    'computed-property-spacing': 'error',
    curly: 'error',
    'dot-location': ['error', 'property'],
    'dot-notation': 'error',
    eqeqeq: 'error',
    'func-call-spacing': 'off',
    indent: 'off',
    'key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
    'keyword-spacing': 'off',
    'lines-between-class-members': 'off',
    'max-len': [
      'error',
      {
        code: 140,
        tabWidth: 2,
        ignoreUrls: true,
        ignoreTrailingComments: true,
        ignoreRegExpLiterals: true,
        ignorePattern: '^import [^,]+ from',
      },
    ],
    'multiline-ternary': ['error', 'always-multiline'],
    'new-parens': 'error',
    'newline-per-chained-call': ['error', { ignoreChainWithDepth: 3 }],
    'no-bitwise': 'error',
    'no-confusing-arrow': ['error', { allowParens: true }],
    'no-constant-condition': 'error',
    'no-console': 'error',
    'no-debugger': 'error',
    'no-dupe-class-members': 'off',
    'no-duplicate-imports': 'error',
    'no-empty': ['error', { allowEmptyCatch: true }],
    'no-empty-function': 'off',
    'no-eq-null': 'error',
    'no-extra-boolean-cast': 'off',
    'no-extra-semi': 'off',
    'no-mixed-operators': 'error',
    'no-mixed-spaces-and-tabs': 'error',
    'no-multi-spaces': 'error',
    'no-multiple-empty-lines': ['error', { max: 1 }],
    'no-negated-condition': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-shadow': 'off',
    'no-trailing-spaces': 'warn',
    'no-unneeded-ternary': 'error',
    'no-use-before-define': 'off',
    'no-useless-constructor': 'off',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-void': 'error',
    'no-whitespace-before-property': 'error',
    'object-curly-spacing': 'off',
    'object-shorthand': ['error', 'methods'],
    'one-var-declaration-per-line': 'error',
    'padded-blocks': ['error', 'never'],
    'padding-line-between-statements': 'off',
    'prefer-const': 'error',
    'prefer-object-spread': 'error',
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'quote-props': ['error', 'as-needed'],
    quotes: 'off',
    semi: 'off',
    'semi-spacing': ['error', { before: false, after: true }],
    'semi-style': ['error', 'last'],
    'space-before-blocks': 'off',
    'space-before-function-paren': 'off',
    'space-in-parens': ['error', 'never'],
    'space-infix-ops': 'off',
    'switch-colon-spacing': ['error', { after: true, before: false }],
    yoda: 'error',
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: ['tsconfig.json'],
    ecmaVersion: 'es6',
    extraFileExtensions: ['.vue'],
  },
  overrides: [
    {
      files: ['**/*.spec.ts', '**/*.spec-d.ts'],
      rules: {
        '@typescript-eslint/ban-ts-ignore': 'off',
        '@typescript-eslint/ban-ts-comment': 'off',
      },
    },
    {
      files: ['*.js'],
      rules: {
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/no-require-imports': 'off',
        '@typescript-eslint/no-var-requires': 'off',
        '@typescript-eslint/typedef': 'off',
      },
    },
    {
      files: [
        '**/*.config.ts',
        '**/*.config.js',
        '**/.eslintrc.js',
      ],
      parser: '@typescript-eslint/parser',
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: ['./tsconfig.eslint.json'],
        ecmaVersion: 'es6',
      },
      rules: {
        '@typescript-eslint/naming-convention': [
          'error',
          {
            selector: 'variable',
            format: ['camelCase', 'UPPER_CASE'],
            leadingUnderscore: 'allow',
            trailingUnderscore: 'forbid',
          },
          { selector: 'function', format: ['camelCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
          { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
          {
            selector: 'property',
            format: null,
          },
          { selector: 'parameterProperty', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
          { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
          { selector: 'accessor', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },
          { selector: 'enumMember', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
          { selector: 'class', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
          {
            selector: 'interface',
            format: ['PascalCase'],
            leadingUnderscore: 'forbid',
            trailingUnderscore: 'forbid',
            prefix: ['I'],
          },
          {
            selector: 'typeAlias',
            format: ['PascalCase'],
            leadingUnderscore: 'forbid',
            trailingUnderscore: 'forbid',
            prefix: ['T'],
          },
          {
            selector: 'enum',
            format: ['PascalCase'],
            leadingUnderscore: 'forbid',
            trailingUnderscore: 'forbid',
            suffix: ['Enum'],
          },
          { selector: 'typeParameter', format: ['PascalCase'], leadingUnderscore: 'forbid', trailingUnderscore: 'forbid' },
        ],
      },
    },
  ],
};
